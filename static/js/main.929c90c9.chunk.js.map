{"version":3,"sources":["Components/Ad_Organisms/OrgMessagesWrapper/OrgMessageWrapper.module.css","Components/Ad_Molecules/MclMessageInput/MclMessageInput.module.css","Components/Ad_Atoms/AtmMessageBox/AtmMessageBox.module.css","Components/Ad_Atoms/AtmTeaxtArea/AtmTextArea.jsx","Components/Ad_Atoms/AtmButton/AtmButton.jsx","Components/Ad_Molecules/MclMessageInput/MclMessageInput.jsx","Components/Ad_Atoms/AtmMessageBox/AtmMessageBox.jsx","Components/Ad_Organisms/OrgMessagesWrapper/OrgMessagesWrapper.jsx","Components/Ad_Atoms/AtmClock/AtmClock.jsx","Components/Ad_Pages/PgMessageTime/PgMessageTime.jsx","App.js","reportWebVitals.js","index.js","Components/Ad_Pages/PgMessageTime/PgMessageTime.module.css"],"names":["module","exports","AtmTextArea","message","setMessage","sendMessage","onChange","e","target","value","placeholder","onKeyPress","event","charCode","shiftKey","preventDefault","AtmButton","name","onClick","MclMessageInput","btnName","messageArr","setMessageArr","useState","prev","alert","useEffect","className","classes","AdMessageInput","AtmMessageBox","options","strings","autoStart","cursor","delay","OrgMessagesWrapper","OrgMessageWrapper","InputBar","MessageInput","map","index","AtmClock","dateNow","Date","timeRef","useRef","current","time","setTime","addForwardZero","timeSegment","toString","padStart","getHours","getMinutes","getSeconds","interval","setInterval","clearInterval","ref","loop","deleteSpeed","pauseFor","PgMessageTime","messageRef","0","1","offsetY","setOffsetY","getOffsetY","scrollTop","enableMouseEvents","onChangeIndex","indexLatest","yScrollChange","Base","Messages","onScroll","Time","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.929c90c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"OrgMessageWrapper\":\"OrgMessageWrapper_OrgMessageWrapper__aKBKm\",\"MessageInput\":\"OrgMessageWrapper_MessageInput__2B72D\",\"InputBar\":\"OrgMessageWrapper_InputBar__2nHsR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AdMessageInput\":\"MclMessageInput_AdMessageInput__1JvRr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AtmMessageBox\":\"AtmMessageBox_AtmMessageBox__EKSlu\"};","import React from \"react\";\r\n\r\n/**\r\n * компонент, который записывает сообщение, втом числе на ENTER\r\n *\r\n * @param {string} message -вводимое сообщение\r\n * @param {callback} setMessage - хук для записи сообщения\r\n * @param {callback} sendMessage - ф-я для отправки сообщения\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AtmTextArea = ({ message, setMessage, sendMessage }) => {\r\n  const handleInput = (e) => {\r\n    setMessage(e.target.value);\r\n  };\r\n\r\n  const handleEnter = (event) => {\r\n    if (event.charCode === 13 && !event.shiftKey) {\r\n      event.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      <textarea\r\n        onChange={handleInput}\r\n        value={message}\r\n        placeholder={\"Введи сообщение\"}\r\n        onKeyPress={handleEnter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AtmTextArea;\r\n","import React from \"react\";\r\n\r\n/**\r\n *  компонент базовой кнопки\r\n *\r\n * @param {string} name - отображаемое название кнопки\r\n * @param {callback} onClick - действие по клику на кнопку\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AtmButton = ({ name, onClick }) => {\r\n  return <button onClick={onClick}> {name}</button>;\r\n};\r\n\r\nexport default AtmButton;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport classes from \"./MclMessageInput.module.css\";\r\nimport AtmTextArea from \"../../Ad_Atoms/AtmTeaxtArea/AtmTextArea\";\r\nimport AtmButton from \"../../Ad_Atoms/AtmButton/AtmButton\";\r\n\r\n/**\r\n * компонент, который содедржит логику отправки сообщения и ререндера при изменении массива сообщений\r\n *\r\n * @param  {string} btnName - отображаемое название кнопки\r\n * @param {Object[]} messageArr - массив сообщений для вывода\r\n * @param {callback} setMessageArr - ф-я для изменения массива сообщений\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst MclMessageInput = ({ btnName, messageArr, setMessageArr }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const sendMessage = () => {\r\n    if (message !== \"\") {\r\n      setMessageArr((prev) => [...prev, `${message}`]);\r\n      setMessage(\"\");\r\n    } else {\r\n      alert(\"Сообщение не может быть пустым\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {}, [messageArr]);\r\n\r\n  return (\r\n    <div className={classes.AdMessageInput}>\r\n      <AtmTextArea\r\n        message={message}\r\n        setMessage={setMessage}\r\n        sendMessage={sendMessage}\r\n      />\r\n      <AtmButton name={btnName} message={message} onClick={sendMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MclMessageInput;\r\n","import React from \"react\";\r\nimport classes from \"./AtmMessageBox.module.css\";\r\nimport Typewriter from \"typewriter-effect\";\r\n\r\n/**\r\n * компонент, который посимвольно выводит сообщение\r\n *\r\n * @param {string} message - текст сообщения\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AtmMessageBox = ({ message }) => {\r\n  return (\r\n    <div className={classes.AtmMessageBox} >\r\n      <Typewriter\r\n        options={{\r\n          strings: message,\r\n          autoStart: true,\r\n          cursor: \"\",\r\n          delay: 50,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default AtmMessageBox;\r\n","import React, { useState } from \"react\";\r\nimport classes from \"./OrgMessageWrapper.module.css\";\r\nimport MclMessageInput from \"../../Ad_Molecules/MclMessageInput/MclMessageInput\";\r\nimport AtmMessageBox from \"../../Ad_Atoms/AtmMessageBox/AtmMessageBox\";\r\n\r\n/**\r\n * Компонент, который выводит блок ввода сообщения и обрабатывает массив сообщений для вывода\r\n * @param {string} btnName - название кнопки\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst OrgMessagesWrapper = ({ btnName }) => {\r\n  const [messageArr, setMessageArr] = useState([]);\r\n\r\n  return (\r\n    <div className={classes.OrgMessageWrapper}>\r\n      <div className={classes.InputBar}>\r\n        <div className={classes.MessageInput}>\r\n          <MclMessageInput\r\n            btnName={btnName}\r\n            messageArr={messageArr}\r\n            setMessageArr={setMessageArr}\r\n          />\r\n        </div>\r\n      </div>\r\n      {messageArr.map((message, index) => {\r\n        return <AtmMessageBox key={`msg-${index}`} message={message} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrgMessagesWrapper;\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport Typewriter from \"typewriter-effect\";\r\n\r\n/**\r\n *  компонент который возвращает JSX с текущем временем в формате \"ЧЧ : ММ : СС\"\r\n *  либо анимацию \"...\", пока время не определено\r\n *\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst AtmClock = () => {\r\n  const dateNow = new Date();\r\n\r\n  const timeRef = useRef(null);\r\n  const [time, setTime] = useState(timeRef.current);\r\n\r\n  /**\r\n   * добавляет 0 слева, если длина строки меньше 2\r\n   * @param {number} timeSegment - секунды, минуты или часы из объекта даты\r\n   * @returns {string} - строка длиной в 2 символа, с лидирующим 0 при необходимости\r\n   */\r\n  const addForwardZero = (timeSegment) => {\r\n    return timeSegment.toString().padStart(2, \"0\");\r\n  };\r\n\r\n  /**\r\n   * получает секунды из объекта даты, добавляет 0, если значение меньше 10\r\n   * @returns {string} -двузначное значение секунд\r\n   */\r\n  const getSeconds = () => {\r\n    return addForwardZero(dateNow.getSeconds());\r\n  };\r\n\r\n  /**\r\n   * получает минуты из объекта даты, добавляет 0, если значение меньше 10\r\n   * @returns {string} -двузначное значение минут\r\n   */\r\n  const getMinutes = () => {\r\n    return addForwardZero(dateNow.getMinutes());\r\n  };\r\n\r\n  /**\r\n   * получает часы из объекта даты, добавляет 0, если значение меньше 10\r\n   * @returns {string} -двузначное значение часов\r\n   */\r\n  const getHours = () => {\r\n    return addForwardZero(dateNow.getHours());\r\n  };\r\n\r\n  /**\r\n   *  собирает все элементы даты длиной из 2 символов в строку, разделённую \":\"\r\n   * @returns {string} текущее значение времени в формате \"ЧЧ : ММ : СС\"\r\n   */\r\n  const getCurrentTime = () => {\r\n    return `${getHours()} : ${getMinutes()} : ${getSeconds()}`;\r\n  };\r\n\r\n\r\n    timeRef.current = getCurrentTime();\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setTime( time => timeRef.current);\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!time\r\n        ?\r\n          <Typewriter\r\n            options={{\r\n              strings: '...',\r\n              autoStart: true,\r\n              cursor: \"\",\r\n              loop: true,\r\n              delay: 50,\r\n              deleteSpeed: 50,\r\n              pauseFor: 50,\r\n\r\n        }}\r\n      />\r\n        :\r\n          <div ref={timeRef}> {time}</div>}\r\n\r\n    </>\r\n  );\r\n};\r\nexport default AtmClock;\r\n","import React, { useRef, useState } from \"react\";\r\nimport OrgMessagesWrapper from \"../../Ad_Organisms/OrgMessagesWrapper/OrgMessagesWrapper\";\r\nimport classes from \"./PgMessageTime.module.css\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\nimport AtmClock from \"../../Ad_Atoms/AtmClock/AtmClock\";\r\n\r\n/**\r\n * компонент, который отвечает за переключение горизонтальных областей, запоминает их позицию вертикального скролла\r\n * @returns {JSX.Element}\r\n * @constructor\r\n */\r\nconst PgMessageTime = () => {\r\n  const messageRef = useRef(0);\r\n  const timeRef = useRef(0);\r\n\r\n  const [offsetY, setOffsetY] = useState({\r\n    0: messageRef.current,\r\n    1: timeRef.current,\r\n  });\r\n\r\n  /**\r\n   * запоминает вертикальную позицию скролла для каждой области\r\n   *\r\n   * @param {string} index - индекс обрабатываемой области видимости ( сокгласно  SwipableViews)\r\n   */\r\n  const getOffsetY = (index) => {\r\n    switch (index) {\r\n      case \"0\":\r\n        setOffsetY((offsetY) => ({\r\n          ...offsetY,\r\n          [\"0\"]: messageRef.current.scrollTop,\r\n        }));\r\n        break;\r\n      case \"1\":\r\n        setOffsetY((offsetY) => ({\r\n          ...offsetY,\r\n          [\"1\"]: timeRef.current.scrollTop,\r\n        }));\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  устанавливает записанное значение ввертикального скролла для каждой области\r\n   * @param {number} index - индекс обрабатываемой области видимости ( сокгласно  SwipableViews)\r\n   */\r\n  const yScrollChange = (index) => {\r\n    switch (index) {\r\n      case 0:\r\n        messageRef.current.scrollTop = offsetY[\"0\"];\r\n        break;\r\n      case 1:\r\n        timeRef.current.scrollTop = offsetY[\"1\"];\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SwipeableViews\r\n        enableMouseEvents={true}\r\n        onChangeIndex={(index, indexLatest) => yScrollChange(index, indexLatest)}\r\n      >\r\n        <div\r\n          className={`${classes.Base} ${classes.Messages}`}\r\n          ref={messageRef}\r\n          onScroll={() => getOffsetY(\"0\")}\r\n        >\r\n          <OrgMessagesWrapper btnName={\"Отправить\"} />\r\n        </div>\r\n        <div\r\n          className={`${classes.Base} ${classes.Time}`}\r\n          ref={timeRef}\r\n          onScroll={() => getOffsetY(\"1\")}\r\n        >\r\n          Текущее время\r\n          <AtmClock />\r\n        </div>\r\n      </SwipeableViews>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PgMessageTime;\r\n","import \"./App.css\";\r\nimport PgMessageTime from \"./Components/Ad_Pages/PgMessageTime/PgMessageTime\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <PgMessageTime />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Base\":\"PgMessageTime_Base__GWuxi\",\"Messages\":\"PgMessageTime_Messages__1GaAO\",\"Time\":\"PgMessageTime_Time__1h_yk\"};"],"sourceRoot":""}